{"version":3,"sources":["components/card.component/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","cat","id","name","email","CardList","cats","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredCats","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,IAAIC,GAApC,4BACnB,mCAAML,EAAMI,IAAIE,KAAhB,OACA,kCAAKN,EAAMI,IAAIG,aCJPC,EAAW,SAAAR,GAGpB,OAAQ,qBAAKC,UAAU,YAAf,SACHD,EAAMS,KAAKC,KAAI,SAAAN,GAAG,OACnB,cAAC,EAAD,CAAmBA,IAAKA,GAAbA,EAAIC,UCLVM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACzB,aAD4D,CAC5D,SAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CKG,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXb,KAAM,GACNU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,KAAMkB,S,oBAOtC,WAAU,IAAD,EAEsBC,KAAKN,MAA1Bb,EAFD,EAECA,KAAMU,EAFP,EAEOA,YACRU,EAAepB,EAAKqB,QAAO,SAAA1B,GAAG,OAClCA,EAAIE,KAAKyB,cAAcC,SAASb,EAAYY,kBAG9C,OACM,sBAAK9B,UAAU,MAAf,UAOA,2CACE,cAAC,EAAD,CAAWW,YAAY,cAAcC,aAAce,KAAKf,eACxD,cAAC,EAAD,CAAUJ,KAAMoB,W,GAtCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.731699a1.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => (\n <div className=\"card-container\">\n     <img alt=\"cats\" src={`https://robohash.org/${props.cat.id}?set=set4&size=180x180`}/>\n     <h2> {props.cat.name} </h2>\n     <p> {props.cat.email}</p>\n </div>   \n)","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card.component/card-component'\nexport const CardList = props => {\n    // console.log(props);\n    //now our app doesn't have to worry about creating the monster cards\n    return (<div className='card-list'>\n        {props.cats.map(cat => (\n        <Card key={cat.id} cat={cat}/>\n        ))}\n    </div>)\n}","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => ( //destructuring placeholder and handleChange\n<input className='search' \ntype='search' \nplaceholder={placeholder}\nonChange={handleChange}\n/>\n);","import './App.css';\nimport React, {Component} from 'react'\nimport  { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cats: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())//the response that we get from the promise in JSON \n    //users is a parameter of that response \n    .then(users => this.setState({cats: users})) \n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  } \n\n  render() {\n\n    const { cats, searchField} = this.state;\n    const filteredCats = cats.filter(cat => \n      cat.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n          <div className=\"App\">\n          {/* <input type=\"search\"\n          placeholder=\"search monsters\"\n          onChange={e => this.setState({searchField: e.target.value})}\n          /> \n          type is already on our searchbox component\n          */}\n          <h1>Meow Meow</h1>\n            <SearchBox placeholder=\"search cats\" handleChange={this.handleChange}/>\n            <CardList cats={filteredCats}/> \n          </div> \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}